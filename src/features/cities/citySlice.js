import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getAll, search } from './cityAPI';

const initialState = {
  all: [],
  links: {},
  status: 'idle',
  searchBy: '',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchAll())`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAll = createAsyncThunk(
  'ficty/fetchAll',
  async (nextPage) => {
    const response = await getAll(nextPage);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const fetchBy = createAsyncThunk(
  'ficty/fetchBy',
  async (value) => {
    const response = await search(value);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const citySlice = createSlice({
  name: 'city',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    searchBy: (state, { payload }) => {
      console.log(payload);
      state.searchBy = payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAll.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAll.fulfilled, (state, action) => {
        state.status = 'idle';
        const data = action.payload.data;
        state.all = [...state.all, ...data];
        state.links = action.payload.links;
      })
      .addCase(fetchBy.pending, (state) => {
        state.status = 'serching';
      })
      .addCase(fetchBy.fulfilled, (state, action) => {
        state.status = 'idle';
        state.all = action.payload.data;
        state.links = action.payload.links;
      });
  },
});

export const { searchBy } = citySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file.
export const selectCities = (state) => state.city.all;
export const selectLinks = (state) => state.city.links;
export const selectSearchBy = (state) => state.city.searchBy;

export default citySlice.reducer;
